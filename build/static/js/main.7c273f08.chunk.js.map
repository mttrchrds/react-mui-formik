{"version":3,"sources":["components/Divider/Divider.js","components/authentication/Login/Login.js","App.js","serviceWorker.js","index.js"],"names":["Divider","label","className","validationSchema","Yup","shape","email","required","password","min","max","withStyles","theme","paper","padding","spacing","formTitle","paddingBottom","rememberRow","justifyContent","alignItems","linkForgotPassword","color","palette","primary","main","fontSize","classes","useState","fieldSaveLogin","setSaveLogin","handleChangeSaveLogin","event","target","checked","handleClickJoin","e","preventDefault","console","log","Paper","Typography","align","variant","initialValues","onSubmit","values","setSubmitting","resetForm","setTimeout","errors","touched","handleChange","handleSubmit","isSubmitting","noValidate","autoComplete","TextField","id","textField","margin","fullWidth","name","onChange","value","helperText","error","type","FormGroup","row","FormControlLabel","control","Checkbox","href","Button","size","disabled","src","process","alt","onClick","useStyles","makeStyles","root","display","flexDirection","minHeight","nav","marginBottom","content","flexGrow","menuButton","marginRight","title","App","props","CssBaseline","AppBar","position","Toolbar","IconButton","edge","aria-label","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7c273f08.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport './Divider.css'\n\nconst Divider = ({ label }) => {\n  return (\n    <div className=\"divider\">\n      <div className=\"divider__line\" />\n      <div className=\"divider__label\">{label}</div>\n    </div>\n  )\n}\n\nDivider.propTypes = {\n  label: PropTypes.string,\n}\n\nexport default Divider\n","import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport { Formik } from 'formik'\nimport * as Yup from 'yup'\n\nimport { withStyles } from '@material-ui/core/styles'\nimport Paper from '@material-ui/core/Paper'\nimport Typography from '@material-ui/core/Typography'\nimport TextField from '@material-ui/core/TextField'\nimport FormGroup from '@material-ui/core/FormGroup'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport Checkbox from '@material-ui/core/Checkbox'\nimport Button from '@material-ui/core/Button'\nimport Divider from '../../Divider/Divider'\n\nimport './Login.css'\n\nconst styles = theme => ({\n  paper: {\n    padding: theme.spacing(3),\n  },\n  formTitle: {\n    paddingBottom: theme.spacing(2),\n  },\n  rememberRow: {\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingBottom: theme.spacing(3),\n  },\n  linkForgotPassword: {\n    color: theme.palette.primary.main,\n  },\n  label: {\n    fontSize: 'inherit',\n  },\n})\n\nconst validationSchema = Yup.object().shape({\n  email: Yup.string()\n    .email('Must be a valid email address')\n    .required('Enter an email address'),\n  password: Yup.string()\n    .min(8, 'Must be at least 8 characters')\n    .max(64, 'Cannot be longer than 64 characters')\n    .required('Enter a password'),\n})\n\nconst Login = ({ classes }) => {\n  const [fieldSaveLogin, setSaveLogin] = useState(false)\n\n  const handleChangeSaveLogin = event => {\n    setSaveLogin(event.target.checked)\n  }\n\n  const handleClickJoin = e => {\n    e.preventDefault()\n    console.log('Redirect would happen here')\n  }\n\n  return (\n    <div className=\"login-page\">\n      <div className=\"login-panel\">\n        <Paper className={classes.paper}>\n          <Typography align=\"center\" variant=\"h5\" className={classes.formTitle}>\n            Login to your account\n          </Typography>\n          <Formik\n            initialValues={{ email: '', password: '' }}\n            validationSchema={validationSchema}\n            onSubmit={(values, { setSubmitting, resetForm }) => {\n              console.log('Submitted values', values)\n              setSubmitting(true)\n              setTimeout(() => {\n                // Mimic half a second wait\n                resetForm()\n                setSubmitting(false)\n              }, 500)\n            }}>\n            {({ values, errors, touched, handleChange, handleSubmit, isSubmitting }) => (\n              <form noValidate autoComplete=\"off\" onSubmit={handleSubmit}>\n                <TextField\n                  id=\"email\"\n                  label=\"Email address\"\n                  className={classes.textField}\n                  margin=\"normal\"\n                  fullWidth\n                  required\n                  variant=\"outlined\"\n                  name=\"email\"\n                  onChange={handleChange}\n                  value={values.email}\n                  helperText={touched.email ? errors.email : ''}\n                  error={errors.email && touched.email ? true : false}\n                />\n                <TextField\n                  id=\"password\"\n                  label=\"Password\"\n                  className={classes.textField}\n                  type=\"password\"\n                  margin=\"normal\"\n                  fullWidth\n                  required\n                  variant=\"outlined\"\n                  name=\"password\"\n                  onChange={handleChange}\n                  value={values.password}\n                  helperText={touched.password ? errors.password : ''}\n                  error={errors.password && touched.password ? true : false}\n                />\n                <FormGroup row className={classes.rememberRow}>\n                  <FormControlLabel\n                    control={<Checkbox color=\"primary\" checked={fieldSaveLogin} onChange={handleChangeSaveLogin} />}\n                    label=\"Remember you\"\n                    classes={{\n                      label: classes.label,\n                    }}\n                  />\n                  <span className=\"link-forgot-password\">\n                    <a href=\"#\" className={classes.linkForgotPassword}>\n                      Forgot your password?\n                    </a>\n                  </span>\n                </FormGroup>\n                <Button variant=\"contained\" color=\"primary\" fullWidth size=\"large\" type=\"submit\" disabled={isSubmitting}>\n                  Login\n                </Button>\n                <div className=\"divider-container\">\n                  <Divider label=\"or continue with\" />\n                </div>\n                <div className=\"form-row-split\">\n                  <Button variant=\"outlined\" size=\"large\" className={classes.margin} fullWidth>\n                    <img src={process.env.PUBLIC_URL + 'facebook-logo.svg'} alt=\"Facebook logo\" className=\"icon icon--facebook\" />\n                    Facebook\n                  </Button>\n                  <Button variant=\"outlined\" size=\"large\" className={classes.margin} fullWidth>\n                    <img src={process.env.PUBLIC_URL + 'google-logo.svg'} alt=\"Google logo\" className=\"icon icon--google\" />\n                    Google\n                  </Button>\n                </div>\n                <div className=\"divider-container\">\n                  <Divider label=\"don't have an account?\" />\n                </div>\n                <Button variant=\"contained\" color=\"secondary\" fullWidth size=\"large\" type=\"button\" onClick={handleClickJoin}>\n                  Create account\n                </Button>\n              </form>\n            )}\n          </Formik>\n        </Paper>\n      </div>\n    </div>\n  )\n}\n\nLogin.propTypes = {\n  classes: PropTypes.object.isRequired,\n}\n\nexport default withStyles(styles)(Login)\n","import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\n\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport IconButton from '@material-ui/core/IconButton'\nimport Typography from '@material-ui/core/Typography'\nimport MenuIcon from '@material-ui/icons/Menu'\nimport Login from './components/authentication/Login/Login'\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n    flexDirection: 'column',\n    minHeight: '100vh',\n  },\n  nav: {\n    marginBottom: theme.spacing(3),\n  },\n  content: {\n    display: 'flex',\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}))\n\nconst App = props => {\n  const classes = useStyles()\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <div className={classes.nav}>\n        <AppBar position=\"sticky\">\n          <Toolbar>\n            <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n              <MenuIcon />\n            </IconButton>\n            <Typography variant=\"h6\" className={classes.title}>\n              Example React, Material UI and Formik login page\n            </Typography>\n          </Toolbar>\n        </AppBar>\n      </div>\n      <div className={classes.content}>\n        <Login />\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}